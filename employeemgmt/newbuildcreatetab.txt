newbuildcreatetab
def build_create_tab(parent, connection, cursor):
    entry_widgets = {}

    emp_personal_info_fields = [
        "first_name", "last_name", "position", "phone",
        "address", "city", "state", "country", "personal_email"
    ]
    compensation_table_fields = ["salary", "bonus", "salary_set_date"]
    emp_company_info_fields = ["company_email", "department", "manager_emp_id", "hire_date", "termination_date"]
    badge_info_fields = ["badge_id", "activation_date", "deactivation_date"]
    employee_time_off_fields = ["hours_remaining", "hours_consumed", "total_annual_hours"]

    static_fields = {
        "employee_personal_info": emp_personal_info_fields,
        "compensation_table": compensation_table_fields,
        "employee_company_info": emp_company_info_fields,
        "badge_info": badge_info_fields,
        "employee_time_off": employee_time_off_fields
    }

    # Scrollable canvas layout
    canvas = tk.Canvas(parent)
    scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas.yview)
    scroll_frame = ttk.Frame(canvas)

    scroll_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
    canvas.create_window((0, 0), window=scroll_frame, anchor="nw")
    canvas.configure(yscrollcommand=scrollbar.set)

    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")

    row_idx = 0  # Global row index for grid layout

    # Top employee ID field
    ttk.Label(scroll_frame, text="Employee ID", font=("Helvetica", 12, "bold")).grid(row=row_idx, column=0, sticky="e", padx=10, pady=5)
    employee_id_entry = ttk.Entry(scroll_frame)
    employee_id_entry.grid(row=row_idx, column=1, sticky="w", padx=10, pady=5)
    row_idx += 1

    # Hidden employee_id entry for each table
    for table_name in static_fields.keys():
        hidden_entry = ttk.Entry(scroll_frame)
        hidden_entry.grid_forget()
        entry_widgets[f"{table_name}.employee_id"] = hidden_entry

    # Field generator with .grid()
    def generate_static_fields(frame, table_name, fields, start_row):
        row = start_row
        section_label = ttk.Label(frame, text=table_name.replace('_', ' ').title(), font=("Helvetica", 12, "bold"))
        section_label.grid(row=row, column=0, columnspan=2, pady=(15, 5), sticky="w")
        row += 1

        for field in fields:
            label = ttk.Label(frame, text=field.replace('_', ' ').title())
            label.grid(row=row, column=0, sticky="e", padx=10, pady=5)

            entry = ttk.Entry(frame)
            entry.grid(row=row, column=1, sticky="w", padx=10, pady=5)

            entry_widgets[f"{table_name}.{field}"] = entry
            row += 1

        return row

    # Generate all field sections
    for table_name, fields in static_fields.items():
        row_idx = generate_static_fields(scroll_frame, table_name, fields, row_idx)

    # Submit and Clear buttons
    ttk.Button(scroll_frame, text="Submit", command=lambda: help.on_submit(employee_id_entry, entry_widgets, connection, cursor)).grid(row=row_idx, column=0, columnspan=2, pady=(20, 10))
    row_idx += 1
    ttk.Button(scroll_frame, text="Clear", command=lambda: help.clear_fields(employee_id_entry, entry_widgets, connection, cursor)).grid(row=row_idx, column=0, columnspan=2, pady=(0, 10))
